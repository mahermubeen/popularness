version: '3.9'

# Docker Services
services:
    nginx:
      image: nginx:${NGINX_VERSION}
      volumes:
        - ${PROJECT_DIRECTORY}:${SERVER_DIRECTORY}
        - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      depends_on:
        - php
        - mysql
      restart: unless-stopped
      networks:
        - frontend
      ports:
        - "8080:80"

    php:
      build:
          context: ${PROJECT_DIRECTORY}
          dockerfile: docker/php/Dockerfile
          args:
            - PHP_VERSION=$PHP_VERSION
      volumes:
        - ${PROJECT_DIRECTORY}:${SERVER_DIRECTORY}
      restart: unless-stopped
      tty: true
      networks:
          - frontend
      ports:
        - "9000:9000"

    mysql:
      image: mysql:${MYSQL_VERSION}
      environment:
        MYSQL_DATABASE: ${DB_DATABASE}
        MYSQL_USER: ${DB_USERNAME}
        MYSQL_PASSWORD: ${DB_PASSWORD}
        MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
        SERVICE_NAME: mysql
        SERVICE_TAGS: dev
      volumes:
        - mysql_data:/var/lib/mysql
      command: mysqld --sql_mode="" --max-allowed-packet=1073741824
      restart: unless-stopped
      tty: true
      networks:
        - frontend
        - backend
      ports:
        - "3306:3306"

    composer:
      image: composer:${COMPOSER_VERSION}
      volumes:
        - ${PROJECT_DIRECTORY}:${SERVER_DIRECTORY}
      working_dir: ${SERVER_DIRECTORY}
      entrypoint: ['composer', '--ignore-platform-reqs']

    npm:
      image: node:${NODE_VERSION}
      volumes:
        - ${PROJECT_DIRECTORY}:${SERVER_DIRECTORY}
      working_dir: ${SERVER_DIRECTORY}
      entrypoint: ['npm']
      ports:
        - 3000:3000
        - 3001:3001

    artisan:
      build:
        context: ${PROJECT_DIRECTORY}
        dockerfile: docker/artisan/Dockerfile
        args:
          - PHP_VERSION=$PHP_VERSION
      volumes:
        - ${PROJECT_DIRECTORY}:${SERVER_DIRECTORY}
      working_dir: ${SERVER_DIRECTORY}
      entrypoint: ['php', '${SERVER_DIRECTORY}/artisan']
      networks:
        - backend

    mailhog:
      image: mailhog/mailhog:latest
      restart: always
      networks:
        - backend
      ports:
        - 1025:1025
        - 8025:8025

    redis:
      image: redis:${REDIS_VERSION}
      restart: unless-stopped
      networks:
        - backend
      ports:
        - 6379:6379

# Docker Networks
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

# Docker Volumes
volumes:
  mysql_data:
